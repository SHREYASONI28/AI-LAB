#ForwardReasoning
class ForwardReasoning:
    def __init__(self, rules, facts):
        """
        Initializes the ForwardReasoning system.

        Parameters:
            rules (list): List of rules as tuples (condition, result),
                          where 'condition' is a set of facts.
            facts (set): Set of initial known facts.
        """
        self.rules = rules  # List of rules (condition -> result)
        self.facts = set(facts)  # Known facts

    def infer(self, query):
        """
        Applies forward reasoning to infer new facts based on rules and initial facts.

        Parameters:
            query (str): The fact to verify if it can be inferred.

        Returns:
            bool: True if the query can be inferred, False otherwise.
        """
        applied_rules = True

        while applied_rules:
            applied_rules = False
            for condition, result in self.rules:
                if condition.issubset(self.facts) and result not in self.facts:
                    self.facts.add(result)
                    applied_rules = True
                    print(f"Applied rule: {condition} -> {result}")
                    # If the query is inferred, return True immediately
                    if query in self.facts:
                        return True
        return query in self.facts


# Define the Knowledge Base (KB) with rules as (condition, result)
rules = [
    ({"American(Robert)"}, "Sells(Robert, m1, CountryA)"),  # Based on Owns(CountryA, m) ^ Missile(m)
    ({"Sells(Robert, m1, CountryA)", "American(Robert)", "Hostile(CountryA)"}, "Criminal(Robert)"),  # Final inference
]

# Define initial facts
facts = {
    "American(Robert)",
    "Hostile(CountryA)",
    "Missile(m1)",
    "Owns(CountryA, m1)",
}

# Query
alpha = "Criminal(Robert)"

# Initialize and run forward reasoning
reasoner = ForwardReasoning(rules, facts)
result = reasoner.infer(alpha)

print("\nFinal facts:")
print(reasoner.facts)
print(f"\nQuery '{alpha}' inferred: {result}")

OUTPUT:
Applied rule: {'American(Robert)'} -> Sells(Robert, m1, CountryA)
Applied rule: {'Sells(Robert, m1, CountryA)', 'Hostile(CountryA)', 'American(Robert)'} -> Criminal(Robert)

Final facts:
{'Hostile(CountryA)', 'Sells(Robert, m1, CountryA)', 'Criminal(Robert)', 'Missile(m1)', 'American(Robert)', 'Owns(CountryA, m1)'}

Query 'Criminal(Robert)' inferred: True

